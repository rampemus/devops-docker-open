https://docs.aws.amazon.com/AmazonECS/latest/developerguide/docker-basics.html
launch 3 EC2 Amazon Linux 2 AMI instances
access them via SSH: $ ssh -i /path/my-key-pair.pem ec2-user@<IPv4 Public IP>
$ sudo yum update -y
$ sudo amazon-linux-extras install docker -y
$ sudo service docker start
$ sudo hostnamectl set-hostname webserver.mydomain.com
$ sudo usermod -a -G docker ec2-user
exit and access via SSH again, for the next time this should be done with a script

Name one of your machines as Manager

https://gridscale.io/en/community/tutorials/how-to-create-a-docker-swarm-cluster/
EXCEPTION: when using command:
Manager$ docker swarm init --advertise-addr <IPv4 Public IP>
go to AWS security terminal and open the port for the workers
if you forgot your token:
Manager$ docker swarm join-token worker

Active swarm would now look like this:
[ec2-user@ip-172-31-87-22 ~]$ docker node ls
ID                            HOSTNAME                       STATUS              AVAILABILITY        MANAGER STATUS      ENGINE VERSION
p4lf44u4f6qige56gt67pbg7a     ip-172-31-80-84.ec2.internal   Ready               Active                                  18.06.1-ce
okiip22x0hy18tm5ols2w1ur5 *   ip-172-31-87-22.ec2.internal   Ready               Active              Leader              18.06.1-ce
bbllli89m6h49xx1658eq6s6g     ip-172-31-91-98.ec2.internal   Ready               Active                                  18.06.1-ce

then access your manager and deploy the services

https://docs.docker.com/v17.12/engine/swarm/services/
manager$ git clone https://github.com/rampemus/weatherapp
manager$ cp weatherapp/weatherapp-stack.yaml .
manager$ docker stack deploy -c weatherapp-stack.yaml

using command 'docker container ls' I found out that the containers are now running:
manager:
    - rampemus/weatherapp-backend:latest
    - rampemus/weatherapp-frontend:latest
worker1:
    - rampemus/weatherapp-frontend:latest
worker2:
    - rampemus/weatherapp-frontend:latest

Finally open ports 80 and 9000 from the AWS security terminal for the client to access

To get a better view visualizer can be added (check out my result in the screenshot)
$ docker service create \
   --name=viz \
   --publish=8080:8080/tcp \
   --constraint=node.role==manager \
   --mount=type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock \
   dockersamples/visualizer
